export interface Stop {
  id: string;
  stop_name?: string;
  location?: Geometry;
  arrivalOffset: number;
  departureOffset: number;
  distance: number;
  selected: boolean;
  private: boolean;
}

export interface Calendar {
  monday: boolean;
  tuesday: boolean;
  wednesday: boolean;
  thursday: boolean;
  friday: boolean;
  saturday: boolean;
  sunday: boolean;
}

export interface PersistTripRequestBody {
  // information about the stops on this trip
  // either provide stop id
  // or stop_name and location
  // stop.id will look up stops in the database
  // stops without ID will be added as temporary stops to the trip
  stops: Stop[];
  start_date: string; // when is the first departure?
  end_date?: string; // if trip is reoccuring, set date on which the reoccuring stops
  calendar?: Calendar; // if trip is reoccuring, set week days the trip happens
  vehicle?: string; // pre-set the vehicle. Can be added/changed later
  route?: string; // pre-define a route ID or generate one, if undefined
  agency?: string; // if this trip belongs to an agency, set agency id
}

// Generated by https://quicktype.io

export interface OTPPlan {
  plan: Plan;
}

export interface Plan {
  date: number;
  from: PlanFrom;
  to: PlanFrom;
  itineraries: Itinerary[];
}

export interface PlanFrom {
  name: string;
  lon: number;
  lat: number;
  vertexType: string;
}

export interface Itinerary {
  duration: number;
  startTime: number;
  endTime: number;
  walkTime: number;
  transitTime: number;
  waitingTime: number;
  walkDistance: number;
  walkLimitExceeded: boolean;
  generalizedCost: number;
  elevationLost: number;
  elevationGained: number;
  transfers: number;
  fare?: Fare;
  legs: Leg[];
  systemNotices?: SystemNotice[];
  tooSloped: boolean;
  arrivedAtDestinationWithRentedBicycle: boolean;
}

export interface Fare {
  fare: Details;
  details: Details;
}

export interface Details {}

export interface Leg {
  startTime: number;
  endTime: number;
  departureDelay: number;
  arrivalDelay: number;
  realTime: boolean;
  distance: number;
  generalizedCost: number;
  pathway: boolean;
  mode: string;
  transitLeg: boolean;
  route: string;
  agencyTimeZoneOffset: number;
  interlineWithPreviousLeg: boolean;
  from: IntermediateStopClass;
  to: IntermediateStopClass;
  legGeometry: LegGeometry;
  steps: Step[];
  rentedBike?: boolean;
  walkingBike?: boolean;
  duration: number;
  agencyName?: string;
  agencyUrl?: string;
  routeColor?: string;
  routeType?: number;
  routeId?: string;
  routeTextColor?: string;
  tripShortName?: string;
  headsign?: string;
  agencyId?: string;
  tripId?: string;
  serviceDate?: string;
  intermediateStops?: IntermediateStopClass[];
  routeShortName?: string;
  routeLongName?: string;
  userName?: string;
  schedule_relationship?: string;
}

export interface IntermediateStopClass {
  name: string;
  lon: number;
  lat: number;
  departure?: number;
  vertexType: string;
  stopId?: string;
  arrival?: number;
  stopIndex?: number;
  stopSequence?: number;
}

export interface LegGeometry {
  points: string;
  length: number;
}

export interface Step {
  distance: number;
  relativeDirection: string;
  streetName: string;
  absoluteDirection: string;
  stayOn: boolean;
  area: boolean;
  bogusName: boolean;
  lon: number;
  lat: number;
  elevation: string;
  walkingBike: boolean;
}

export interface SystemNotice {
  tag: string;
  text: string;
}

export interface StopData {
  stop_code?: string;
  stop_name?: string;
  tts_stop_name?: string;
  stop_desc?: string;
  stop_lat?: string;
  stop_lon?: string;
  zone_id?: string;
  stop_url?: string;
  location_type?: string;
  parent_stop_id?: string;
  stop_timezone?: string;
  wheelchair_boarding?: string;
  level_id?: string;
  platform_code?: string;
  active?: string;
}

export const stopDataKeys = [
  'stop_code',
  'stop_name',
  'tts_stop_name',
  'stop_desc',
  'stop_lat',
  'stop_lon',
  'zone_id',
  'stop_url',
  'location_type',
  'parent_stop_id',
  'stop_timezone',
  'wheelchair_boarding',
  'level_id',
  'platform_code',
  'active',
];

export interface StopDataId extends StopData {
  stop_id?: string;
}

export interface FeatureCollection {
  features: Feature[];
  type: string;
}

export interface Feature {
  geometry: Geometry;
  type: string;
  properties: Properties;
}

export interface Properties {
  osm_id: number;
  osm_type: string;
  extent: number[];
  country: string;
  osm_key: string;
  city?: string;
  countrycode: string;
  district?: string;
  osm_value: string;
  postcode: string;
  name: string;
  type: string;
  county?: string;
  state?: string;
  housenumber?: string;
  street?: string;
}

export interface Geometry {
  coordinates: [number, number][];
  type: GeometryType;
}

export enum GeometryType {
  Point = 'Point',
}

export interface Radar {
  id: string;
  from: Geometry;
  to: Geometry;
  from_name: string;
  to_name: string;
  date: string;
  has_search_results?: boolean | null;
  user_created?: string;
}

// graphhopper navigation
// Generated by https://quicktype.io

export interface GraphhopperNavigation {
  hints: Hints;
  info: Info;
  paths: Path[];
}

export interface Hints {
  'visited_nodes.sum': number;
  'visited_nodes.average': number;
}

export interface Info {
  copyrights: string[];
  took: number;
}

export interface Path {
  distance: number;
  weight: number;
  time: number;
  transfers: number;
  points_encoded: boolean;
  bbox: number[];
  points: Points;
  instructions: Instruction[];
  legs: any[];
  details: Details;
  ascend: number;
  descend: number;
  snapped_waypoints: Points;
}

export interface Details {}

export interface Instruction {
  distance: number;
  heading?: number;
  sign: number;
  interval: number[];
  text: string;
  time: number;
  street_name: string;
  last_heading?: number;
}

export interface Points {
  type: string;
  coordinates: Array<number[]>;
}
